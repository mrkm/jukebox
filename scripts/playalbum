#!/usr/bin/python
# -*- coding: utf-8 -*-
import sys, os#, subprocess
import optparse
#import random

os.environ['PATH'] = "/usr/bin"
MEDIA_ROOT = os.path.join(os.environ['HOME'], 'Music/iTunes/iTunes Media/Music/')

# class Process:
#     def __init__(self):
#         self.status = None
#     def _exec(cmd, stdin=None):
#         p = subprocess.Popen(cmd, stdin=subprocess.PIPE, stdout=subprocess.PIPE)
#         if ( stdin ):
#             p.stdin.write(stdin)
#             p.stdin.close()
#         else:
#             p.stdin.close()
#         result = p.stdout.read()        # 結果(stdout)の読み込み
#         p.stdout.close()
#         status = p.wait()               # 子プロセスのリターンコードの読み込み（０が正常。それ以外は異常系）        
#         return result, status


def _listdir(path):
    result = []
    if os.path.isdir(path):
        result = os.listdir(path)
        if '.DS_Store' in result:
            result.remove('.DS_Store')
        lesult.sort()
    return result


class Number:
    def __init__(self, artist, album, number, lib_path=MEDIA_ROOT):
        self.path = os.path.join(lib_path, artist, album, number)
        self.artist = artist
        self.album = album
        self.name = number
        
    def __str__(self):
        return unicode(self).encode('utf-8')

    def __unicode__(self):
        return self.name

    def __cmp__(self, other):
        try:
            return cmp(int(self.name[:2]), int(other.name[:2]))
        except:
            return cmp(self.name, other.name)


class Album:
    def __init__(self, artist, album, lib_path=MEDIA_ROOT):
        self.path = os.path.join(lib_path, artist, album)
        self.artist = artist
        self.name = album
        self.numbers = {}
        cant_reed = 0
        for number in _listdir(self.path):            
            try:
                _number = Number(artist, album, number.decode('utf-8', 'replace'))
                self.numbers[str(_number)] = _number
            except:
                cant_reed += 1
        #if cant_reed:
        #    print "pass %s file(s)" % cant_reed

    def __str__(self):
        return unicode(self).encode('utf-8')

    def __unicode__(self):
        return self.name


class Artist:
    def __init__(self, artist, lib_path=MEDIA_ROOT):
        self.path = os.path.join(lib_path, artist)
        self.name = artist
        self.albums = {}
        cant_reed = 0
        for album in _listdir(self.path):
            try:
                _album = Album(artist, album.decode('utf-8', 'replace'))
                self.albums[str(_album)] = _album
            except:
                cant_reed += 1
        #if cant_reed:
        #    print "pass %s file(s)" % cant_reed

    def __str__(self):
        return unicode(self).encode('utf-8')

    def __unicode__(self):
        return self.name


class JukeBox:
    def __init__(self):
        self.media_root = MEDIA_ROOT
        #self.process = Process()
        self.artists = {}
        self.get_artists()
                
    def growlnotify(self):
        cmd = ('echo "afplay - now playing %s" | growlnotify' % self)

    def get_album(self):
        self.artists.name

    def get_artists(self):
        for artist in _listdir(self.media_root):
            _artist = Artist(artist.decode('utf-8', 'replace'))
            self.artists[str(_artist)] = _artist

    def show_artists(self):
        line = ''
        for artist in self.artists.keys():
            if not line == '':
                line += '\t'
            line += str(artist)
            if len(line) > 80:
                print line
                line = ''
        print line
        return 0

    def show_albums(self, artist):
        line = ''
        for album in self.artists[artist].albums:
            if not line == '':
                line += '\t'
            line += str(album)
            if len(line) > 80:
                print line
                line = ''
        print line
        return 0
        
    def play(self, number, volume, stdin=None):        
        if not isinstance(number, Number):
            return 1
        cmd ='afplay -v %10.2f -q 1 "%s"' % (float(volume)/100,number.path)
        os.system(cmd)
        return 0


def __main__():

    parser = optparse.OptionParser()
    parser.add_option('-l', '--lists', action='store_true', dest='lists', default=False, help='show artists')
    parser.add_option('-a', '--artist', action='store', dest='artist', default=False, help='choose artist')
    parser.add_option('-d', '--disc', action='store', dest='disc',  default=False, help='choose album')
    parser.add_option('-v', '--volume', action='store', dest='volume', type=int, default=20, help='set volume[1-100]')
    parser.add_option('-q', '--quiet', action='store_true', dest='quiet', default=False, help='work quietly')
    (options, args) = parser.parse_args(sys.argv)
    
    juke = JukeBox()

    if options.lists:
        juke.show_artists()
    elif options.artist:
        if options.disc: 
            artist = juke.artists[options.artist]
            album = artist.albums[options.disc]
            numbers = album.numbers.values()
            if not options.quiet:
                print artist
                print '[31m%s[m' % album
                for number in numbers:
                    print '[31m%s[m' % number
            for number in numbers:
                if not options.quiet:
                    print 'now playing [31m%s[m' % number
                juke.play(number, options.volume)
        else:
            juke.show_albums(options.artist)
    else:
        parser.print_help()


__main__()



