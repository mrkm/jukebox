#!/usr/bin/python
# -*- coding: utf-8 -*-
import sys, os
import optparse
import signal, os

os.environ['PATH'] = "/usr/bin"
MEDIA_ROOT = os.path.join(os.environ['HOME'], 'Music/iTunes/iTunes Media/Music/')
IGNORE_FILE = ['.DS_Store']

def _listdir(path):
    result = []
    if os.path.isdir(path):
        result = os.listdir(path)
        for ignore in IGNORE_FILE:
            if ignore in result:
                result.remove(ignore)
    return result

class Number(object):
    def __init__(self, artist, album, number, lib_path=MEDIA_ROOT):
        self.path = os.path.join(lib_path, artist, album, number)
        self.artist = artist
        self.album = album
        self.name = number

    def __str__(self):
        return unicode(self).encode('utf-8')

    def __unicode__(self):
        return self.name

    def __cmp__(self, other):
        try:
            return cmp(int(self.name[:2]), int(other.name[:2]))
        except:
            return cmp(self.name, other.name)


class Album(object):
    def __init__(self, artist, album, lib_path=MEDIA_ROOT):
        self.path = os.path.join(lib_path, artist, album)
        self.artist = artist
        self.name = album
        self.numbers = {}
        cant_reed = 0
        for number_ in _listdir(self.path):
            try:
                number = Number(artist, album, number_.decode('utf-8', 'replace'))
                self.numbers[str(number)] = number
            except:
                cant_reed += 1

        m4a = [number[:-3] for number in self.numbers.keys() if number.endswith('m4a')]
        for number in m4a:
            try:
                del(self.numbers[number + 'mp3'])
            except KeyError:
                pass

    def __str__(self):
        return unicode(self).encode('utf-8')

    def __unicode__(self):
        return self.name


class Artist(object):
    def __init__(self, artist, lib_path=MEDIA_ROOT):
        self.path = os.path.join(lib_path, artist)
        self.name = artist
        self.albums = {}
        cant_reed = 0
        for album in _listdir(self.path):
            try:
                _album = Album(artist, album.decode('utf-8', 'replace'))
                self.albums[str(_album)] = _album
            except:
                cant_reed += 1
        #if cant_reed:
        #    print "pass %s file(s)" % cant_reed

    def __str__(self):
        return unicode(self).encode('utf-8')

    def __unicode__(self):
        return self.name


class JukeBox(object):
    def __init__(self):
        self.media_root = MEDIA_ROOT
        #self.process = Process()
        self.artists = {}
        self.get_artists()

    def growlnotify(self):
        cmd = ('echo "afplay - now playing %s" | growlnotify' % self)

    def get_album(self):
        self.artists.name

    def get_artists(self):
        for artist in _listdir(self.media_root):
            _artist = Artist(artist.decode('utf-8', 'replace'))
            self.artists[str(_artist)] = _artist

    def show_artists(self, *args, **kwargs):
        threshold = 80
        if kwargs.get('one'):
            threshold = 1
        line = ''
        for artist in sorted(self.artists.keys()):
            if not line == '':
                line += '\t'
            line += str(artist)
            if len(line) > threshold:
                print line
                line = ''
        print line
        return 0

    def show_albums(self, artist):
        line = ''
        for album in self.artists[artist].albums:
            if not line == '':
                line += '\t'
            line += str(album)
            if len(line) > 80:
                print line
                line = ''
        print line
        return 0

    def play(self, number, volume, stdin=None):
        if not isinstance(number, Number):
            return 1
        cmd =u'afplay -v %10.2f -q 1 "%s"' % (float(volume)/100,number.path)
        os.system(cmd)
        return 0

def __main__():

    parser = optparse.OptionParser()
    parser.add_option('-1', '--one', action='store_true', dest='one', default=False, help='one entry per line')
    parser.add_option('-l', '--lists', action='store_true', dest='lists', default=False, help='show artists')
    parser.add_option('-a', '--artist', action='store', dest='artist', default=False, help='choose artist')
    parser.add_option('-d', '--disc', action='store', dest='disc',  default=False, help='choose album')
    parser.add_option('-v', '--volume', action='store', dest='volume', type=int, default=20, help='set volume[1-100]')
    parser.add_option('-q', '--quiet', action='store_true', dest='quiet', default=False, help='work quietly')
    parser.add_option('-A', '--all', action='store_true', dest='all_song', default=False, help='walk throw all song')
    (options, args) = parser.parse_args(sys.argv)

    juke = JukeBox()

    if options.one:
        juke.show_artists(one=True)
    elif options.lists:
        juke.show_artists()
    elif options.all_song:
        artist = juke.artists[options.artist]
        for album in artist.albums.values():
            numbers = sorted(album.numbers.values(), key=lambda number:number.name)
            if not options.quiet:
                print artist
                print '[31m%s[m' % album
                for number in numbers:
                    print '[31m%s[m' % number
            for number in numbers:
                if not options.quiet:
                    print 'now playing [31m%s[m' % number
                juke.play(number, options.volume)
    elif options.artist:
        if options.disc:
            artist = juke.artists[options.artist]
            album = artist.albums[options.disc]
            numbers = album.numbers.values()
            numbers.sort(key=lambda number:number.name)
            if not options.quiet:
                print artist
                print '[31m%s[m' % album
                for number in numbers:
                    print '[31m%s[m' % number
            for number in numbers:
                if not options.quiet:
                    print 'now playing [31m%s[m' % number
                juke.play(number, options.volume)
        else:
            juke.show_albums(options.artist)
    else:
        parser.print_help()

__main__()
